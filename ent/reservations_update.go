// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/dpolimeni/fiber_app/ent/events"
	"github.com/dpolimeni/fiber_app/ent/predicate"
	"github.com/dpolimeni/fiber_app/ent/reservations"
	"github.com/dpolimeni/fiber_app/ent/user"
)

// ReservationsUpdate is the builder for updating Reservations entities.
type ReservationsUpdate struct {
	config
	hooks    []Hook
	mutation *ReservationsMutation
}

// Where appends a list predicates to the ReservationsUpdate builder.
func (ru *ReservationsUpdate) Where(ps ...predicate.Reservations) *ReservationsUpdate {
	ru.mutation.Where(ps...)
	return ru
}

// SetUserID sets the "user" edge to the User entity by ID.
func (ru *ReservationsUpdate) SetUserID(id int) *ReservationsUpdate {
	ru.mutation.SetUserID(id)
	return ru
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (ru *ReservationsUpdate) SetNillableUserID(id *int) *ReservationsUpdate {
	if id != nil {
		ru = ru.SetUserID(*id)
	}
	return ru
}

// SetUser sets the "user" edge to the User entity.
func (ru *ReservationsUpdate) SetUser(u *User) *ReservationsUpdate {
	return ru.SetUserID(u.ID)
}

// SetEventID sets the "event" edge to the Events entity by ID.
func (ru *ReservationsUpdate) SetEventID(id int32) *ReservationsUpdate {
	ru.mutation.SetEventID(id)
	return ru
}

// SetNillableEventID sets the "event" edge to the Events entity by ID if the given value is not nil.
func (ru *ReservationsUpdate) SetNillableEventID(id *int32) *ReservationsUpdate {
	if id != nil {
		ru = ru.SetEventID(*id)
	}
	return ru
}

// SetEvent sets the "event" edge to the Events entity.
func (ru *ReservationsUpdate) SetEvent(e *Events) *ReservationsUpdate {
	return ru.SetEventID(e.ID)
}

// Mutation returns the ReservationsMutation object of the builder.
func (ru *ReservationsUpdate) Mutation() *ReservationsMutation {
	return ru.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (ru *ReservationsUpdate) ClearUser() *ReservationsUpdate {
	ru.mutation.ClearUser()
	return ru
}

// ClearEvent clears the "event" edge to the Events entity.
func (ru *ReservationsUpdate) ClearEvent() *ReservationsUpdate {
	ru.mutation.ClearEvent()
	return ru
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ru *ReservationsUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, ru.sqlSave, ru.mutation, ru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ru *ReservationsUpdate) SaveX(ctx context.Context) int {
	affected, err := ru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ru *ReservationsUpdate) Exec(ctx context.Context) error {
	_, err := ru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ru *ReservationsUpdate) ExecX(ctx context.Context) {
	if err := ru.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ru *ReservationsUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(reservations.Table, reservations.Columns, sqlgraph.NewFieldSpec(reservations.FieldID, field.TypeString))
	if ps := ru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if ru.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   reservations.UserTable,
			Columns: []string{reservations.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   reservations.UserTable,
			Columns: []string{reservations.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ru.mutation.EventCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   reservations.EventTable,
			Columns: []string{reservations.EventColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(events.FieldID, field.TypeInt32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.EventIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   reservations.EventTable,
			Columns: []string{reservations.EventColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(events.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{reservations.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ru.mutation.done = true
	return n, nil
}

// ReservationsUpdateOne is the builder for updating a single Reservations entity.
type ReservationsUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ReservationsMutation
}

// SetUserID sets the "user" edge to the User entity by ID.
func (ruo *ReservationsUpdateOne) SetUserID(id int) *ReservationsUpdateOne {
	ruo.mutation.SetUserID(id)
	return ruo
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (ruo *ReservationsUpdateOne) SetNillableUserID(id *int) *ReservationsUpdateOne {
	if id != nil {
		ruo = ruo.SetUserID(*id)
	}
	return ruo
}

// SetUser sets the "user" edge to the User entity.
func (ruo *ReservationsUpdateOne) SetUser(u *User) *ReservationsUpdateOne {
	return ruo.SetUserID(u.ID)
}

// SetEventID sets the "event" edge to the Events entity by ID.
func (ruo *ReservationsUpdateOne) SetEventID(id int32) *ReservationsUpdateOne {
	ruo.mutation.SetEventID(id)
	return ruo
}

// SetNillableEventID sets the "event" edge to the Events entity by ID if the given value is not nil.
func (ruo *ReservationsUpdateOne) SetNillableEventID(id *int32) *ReservationsUpdateOne {
	if id != nil {
		ruo = ruo.SetEventID(*id)
	}
	return ruo
}

// SetEvent sets the "event" edge to the Events entity.
func (ruo *ReservationsUpdateOne) SetEvent(e *Events) *ReservationsUpdateOne {
	return ruo.SetEventID(e.ID)
}

// Mutation returns the ReservationsMutation object of the builder.
func (ruo *ReservationsUpdateOne) Mutation() *ReservationsMutation {
	return ruo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (ruo *ReservationsUpdateOne) ClearUser() *ReservationsUpdateOne {
	ruo.mutation.ClearUser()
	return ruo
}

// ClearEvent clears the "event" edge to the Events entity.
func (ruo *ReservationsUpdateOne) ClearEvent() *ReservationsUpdateOne {
	ruo.mutation.ClearEvent()
	return ruo
}

// Where appends a list predicates to the ReservationsUpdate builder.
func (ruo *ReservationsUpdateOne) Where(ps ...predicate.Reservations) *ReservationsUpdateOne {
	ruo.mutation.Where(ps...)
	return ruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ruo *ReservationsUpdateOne) Select(field string, fields ...string) *ReservationsUpdateOne {
	ruo.fields = append([]string{field}, fields...)
	return ruo
}

// Save executes the query and returns the updated Reservations entity.
func (ruo *ReservationsUpdateOne) Save(ctx context.Context) (*Reservations, error) {
	return withHooks(ctx, ruo.sqlSave, ruo.mutation, ruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ruo *ReservationsUpdateOne) SaveX(ctx context.Context) *Reservations {
	node, err := ruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ruo *ReservationsUpdateOne) Exec(ctx context.Context) error {
	_, err := ruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ruo *ReservationsUpdateOne) ExecX(ctx context.Context) {
	if err := ruo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ruo *ReservationsUpdateOne) sqlSave(ctx context.Context) (_node *Reservations, err error) {
	_spec := sqlgraph.NewUpdateSpec(reservations.Table, reservations.Columns, sqlgraph.NewFieldSpec(reservations.FieldID, field.TypeString))
	id, ok := ruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Reservations.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, reservations.FieldID)
		for _, f := range fields {
			if !reservations.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != reservations.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if ruo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   reservations.UserTable,
			Columns: []string{reservations.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   reservations.UserTable,
			Columns: []string{reservations.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ruo.mutation.EventCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   reservations.EventTable,
			Columns: []string{reservations.EventColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(events.FieldID, field.TypeInt32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.EventIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   reservations.EventTable,
			Columns: []string{reservations.EventColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(events.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Reservations{config: ruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{reservations.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ruo.mutation.done = true
	return _node, nil
}
